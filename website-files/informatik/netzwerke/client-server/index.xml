<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Client Server on Informatikabitur</title>
    <link>/informatik/netzwerke/client-server.html</link>
    <description>Recent content in Client Server on Informatikabitur</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <atom:link href="/informatik/netzwerke/client-server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Client Server Modellierung</title>
      <link>/informatik/netzwerke/client-server/client-server-modellierung.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/informatik/netzwerke/client-server/client-server-modellierung.html</guid>
      <description>Allgemein:
Nr. Client an Server Server an Client 1 Anfrage Reaktion auf diese Anfrage (Was geschieht bei dieser Anfrage) 2 Message Was passiert beim Erhalt der Message (bei variablen, was für fälle gibt es) &amp;hellip; &amp;hellip; &amp;hellip; Beispiel:
Nr. Client an Server Server an Client 1 ANMELDUNG Begrüßung, Aufforderung zur Wahl der Größe und Farbe des T-Shirts 2 HOODIE: &amp;lt;Groesse&amp;gt;:&amp;lt;Farbe&amp;gt; Größe und Farbe werden bestätigt, Preis wird übermittelt, Bestätigung wird angefordert, Größe oder Farbe ist falsch, Aufforderung für eine korrekte Eingabe 3 BESTAETIGUNG:&amp;lt;Wahl&amp;gt; Bei &amp;lt;Wahl&amp;gt; = ja (gleich) wird dem Kunden gedanktBei &amp;lt;Wahl&amp;gt; = (gleich) nein wird der Kunde abgemeldetBei &amp;lt;Wahl&amp;gt; !</description>
    </item>
    <item>
      <title>Client Server Kommunikation</title>
      <link>/informatik/netzwerke/client-server/client-server-kommunikation.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/informatik/netzwerke/client-server/client-server-kommunikation.html</guid>
      <description>Kommunikation zwischen Client und Server:
Client sendet Server sendet Anfrage → ← Antwort Anfrage → ← &amp;hellip; </description>
    </item>
    <item>
      <title>Client Server Implementierung</title>
      <link>/informatik/netzwerke/client-server/client-server-implementierung.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/informatik/netzwerke/client-server/client-server-implementierung.html</guid>
      <description>Um durch die Abiturklassen eine Verbindung auf zu bauen, werden einige Methoden und Vererbungen benötigt.* Der Client muss hier bei diese Methode implementieren: +ProcessMessage(pMessage: String): void Hierbei ist auch wichtig, dass die jeweilige Client Klasse von der Abiturklasse „Client“ erbt (extends). Hierbei muss auch darauf geachtet werden, dass ein Client Objekt durch super mit einer Server IP sowie Port erstellt wird.
Der Server muss hierbei folgende Methoden Implementieren:
+processNewConnection(pClientIP: String, pClientPort: int): void +processMessage(pClientIP: String, pClientPort: int, pMessage: String): void +processClosingConnection(pClientIP: String, pClientPort: int): voidEs ist darauf zu achten, dass die implementierende Klasse von der Abiturklasse „Server“ erbt (extends), sowie durch einen „super()“ Aufruf eine „Server“ Klasse erstellt.</description>
    </item>
  </channel>
</rss>